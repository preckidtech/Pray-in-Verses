// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  EDITOR
  MODERATOR
  USER
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  displayName  String?
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // existing
  savedPrayers SavedPrayer[]
  journals     Journal[]

  // NEW back-relations for curated workflow
  curatedCreated CuratedPrayer[] @relation("CuratedCreatedBy")
  curatedUpdated CuratedPrayer[] @relation("CuratedUpdatedBy")
}

model SavedPrayer {
  id              String   @id @default(cuid())
  userId          String
  curatedPrayerId String
  createdAt       DateTime @default(now())

  // relations
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  curatedPrayer CuratedPrayer @relation(fields: [curatedPrayerId], references: [id], onDelete: Cascade)

  @@unique([userId, curatedPrayerId]) // a user can save a curated prayer only once
  @@index([userId, createdAt])
}

model Journal {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  body      String
  mood      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, createdAt])
}

model AdminInvite {
  id         String    @id @default(cuid())
  email      String
  role       Role
  token      String    @unique
  invitedBy  String
  acceptedAt DateTime?
  expiresAt  DateTime
  createdAt  DateTime  @default(now())

  @@index([email])
}

enum PublishState {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}

model CuratedPrayer {
  id            String   @id @default(cuid())
  book          String
  chapter       Int
  verse         Int
  theme         String
  scriptureText String
  insight       String
  prayerPoints  String[]
  closing       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // workflow
  state       PublishState @default(DRAFT)
  createdById String? // <-- nullable for now
  updatedById String? // <-- nullable for now
  publishedAt DateTime?

  createdBy User?         @relation("CuratedCreatedBy", fields: [createdById], references: [id], onDelete: Restrict)
  updatedBy User?         @relation("CuratedUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  savedBy   SavedPrayer[]

  @@unique([book, chapter, verse])
}
